apiVersion: v1
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#persistentvolume-v1-core
# api is core/v1 or just v1
kind: PersistentVolume
metadata:
  name: preexisting-pd
  # this is the name in the GCE storage
spec:
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#persistentvolumespec-v1-core
  storageClassName: standard-rwo
  capacity:
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#capacity
    storage: 8Gi
  accessModes:
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
    - ReadWriteOnce
  claimRef:
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#binding
  # claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. 
  # standard objectref, and need namespace and name
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#objectreference-v1-core
    namespace: default
    name: mysql-pv-claim
    # this name is from the persistent volume claim yaml
  gcePersistentDisk:
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#gcepersistentdiskvolumesource-v1-core
    pdName: preexisting-pd
    # pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
    # this is tname in the GCE web console
    # https://kubernetes.io/docs/concepts/storage/volumes/#gcepersistentdisk
    fsType: ext4
    # fsType is filesystem type of the volume that you want to mount
    # Tip: Ensure that the filesystem type is supported by the host operating system. 
    